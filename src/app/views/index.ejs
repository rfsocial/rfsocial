<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../css/index.css">
    <link rel="stylesheet" href="../css/navbar-template.css">
    <link rel="stylesheet" href="../css/notifications.css">
    <link rel="stylesheet" href="../css/post-template.css">
    <link rel="stylesheet" href="../css/comment-template.css">
    <link rel="stylesheet" href="../css/settings-template.css">
    <link rel="stylesheet" href="../css/profile-template.css">
    <link rel="stylesheet" href="../css/posts-layout.css">
    <link rel="stylesheet" href="../css/chat-desktop-template.css">

    <link href='https://fonts.googleapis.com/css?family=Lexend' rel='stylesheet'>
    <script src="https://kit.fontawesome.com/b24ccbfca6.js" crossorigin="anonymous"></script>
    <title>rfsocial</title>
    <script src="/js/spa.js"></script>
    <script src="/js/postsfunc.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/notifications.js"></script>
    <script src="/js/settings.js"></script>
    <script src="/js/friends.js"></script>
    <script src="/js/chat.js"></script>
</head>
<body>
    <script id="user-data" data-user='<%= JSON.stringify(userId) %>'></script>
    <script>
        let navigationStack = [];

        function getUnreadNotifications() {
            fetch(`/api/notifications/push-unread`, {
                method: 'GET',
                credentials: 'include'
            }).catch(error => console.error("Hiba történt a nem olvasott értesítése lekérése során:", error));
        }

        document.addEventListener("DOMContentLoaded", function() {
            const lastPage = localStorage.getItem("last-page");
            if(lastPage === "null"){
                loadContent('api/posts');
            } else {
                loadContent(lastPage);
            }
            getUnreadNotifications();
        })


    async function submitComment(postId) {
            const content = document.getElementById(`comment-content-${postId}`).value;

            if (!content) {
                alert("A komment nem lehet üres!");
                return;
            }

            try {
                const response = await fetch(`/api/posts/${postId}/comments`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content })
                });

                const result = await response.json();

                if (response.ok) {
                    alert(result.message);
                    document.getElementById(`comment-content-${postId}`).value = ''; // Töröljük a beviteli mezőt
                    location.reload(); // Az oldal újratöltése a friss kommentek megjelenítéséhez
                } else {
                    alert(result.message || 'Hiba történt a komment hozzáadása során.');
                }
            } catch (error) {
                console.error('Hiba a komment küldése során:', error);
                alert('Nem sikerült kapcsolódni a szerverhez.');
            }
        }
        async function likePost(postId) {
            try {
                const response = await fetch(`/api/posts/${postId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();
                if (response.ok) {
                    location.reload(); // Oldal újratöltése a frissített like szám megjelenítéséhez
                } else {
                    alert(result.message || 'Hiba történt a like hozzáadásakor.');
                }
            } catch (error) {
                console.error('Hiba történt a like küldése során:', error);
                alert('Nem sikerült kapcsolódni a szerverhez.');
            }
        }

        async function dislikePost(postId) {
            try {
                const response = await fetch(`/api/posts/${postId}/dislike`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();
                if (response.ok) {
                    location.reload(); // Oldal újratöltése a frissített dislike szám megjelenítéséhez
                } else {
                    alert(result.message || 'Hiba történt a dislike hozzáadásakor.');
                }
            } catch (error) {
                console.error('Hiba történt a dislike küldése során:', error);
                alert('Nem sikerült kapcsolódni a szerverhez.');
            }
        }
        async function submitPost() {
            console.log("submitPost loaded");
            const content = document.getElementById('post-content').value;

            if (!content) {
                alert("A bejegyzés nem lehet üres!");
                return;
            }

            try {
                const response = await fetch('/api/posts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content })
                });

                const result = await response.json();

                if (response.ok) {
                    document.getElementById('post-content').value = ''; // Töröljük a beviteli mezőt
                    location.reload(); // Oldal frissítése az új bejegyzés megjelenítéséhez
                } else {
                    alert(result.message || 'Hiba történt a bejegyzés létrehozása során.');
                }
            } catch (error) {
                console.error('Hiba a bejegyzés küldése során:', error);
                alert('Nem sikerült kapcsolódni a szerverhez.');
            }
        }
        document.addEventListener("DOMContentLoaded", function() {
            const lastPage = localStorage.getItem("last-page");
            if(lastPage === "null"){
                loadContent('api/posts');
            } else {
                loadContent(lastPage);
            }
        })

        function displayNotification(notification) {
            const notificationContainer = document.getElementById('push-notification-container');
            const notificationElement = document.createElement('div');
            let imageHtml = '';
            if (notification.picture_url) {
                imageHtml = `<img class="push-notification-img" src="${notification.picture_url}" alt="értesítés képe">`;
            }
            notificationElement.classList.add('push-notification-item');
            notificationElement.innerHTML = `
                    ${imageHtml}
                    <div>
                        <span class="push-notification-title">${notification.title}</span>
                        <span class="push-notification-description">${notification.text}</span>
                    <div>
                `;
            notificationContainer.appendChild(notificationElement);
            setTimeout(() => {
                notificationElement.classList.add('slide-out');
                setTimeout(() => {
                    notificationElement.remove();
                }, 500);
            }, 8000); // 8 másodpercre jelenít meg minden értesítést
        }

        function returnToLastNavigation() {
            if(navigationStack.length > 0) {
                navigationStack.pop();
                loadContent(navigationStack[navigationStack.length - 1]);
            } else {
                loadContent('api/posts');
            }
        }

        function clearLastPage() {
            localStorage.setItem("last-page", 'api/posts');
        }

        const socket = io({
            withCredentials: true,
        });

        socket.on('connect', () => {
            console.log('Felhasználó csatlakozott! (Kliens)');
            socket.on('new-notification', (notification) => {
                console.log("Új értesítés érkezett:", notification);
                displayNotification(notification);
            });
        });

        socket.on('connect_error', (error) => {
            console.log("Hiba a socket kliens oldali csatlakozásnál:", error);
        });
    </script>

    <div class="container">
        <%- include('partials/navbar-template', { isModerator: isModerator });%>
        <div id="main-content"></div>
        <div id="messages-container">
            <%- include('partials/chat-desktop-template', { userId: userId }) %>
        </div>
    </div>

<%# Tesztelési célból létrehozott változó %>
<%# const chatMessages = [
    {
        chatName: 'User5',
        type: 'private',
        messages: [
            {
                id: 1,
                sender: 'User1',
                message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
                timeSent: '2024-11-10 10:00'
            },
            {
                id: 2,
                sender: 'User5',
                message: 'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
                timeSent: '2024-11-10 10:02'
            },
            {
                id: 3,
                sender: 'User1',
                message: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi.',
                timeSent: '2024-11-09 10:05'
            }
        ]
    },
    {
        chatName: 'Group Chat',
        type: 'group',
        messages: [
            {
                id: 1,
                sender: 'User3',
                message: 'Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore.',
                timeSent: '2024-11-10 11:00'
            },
            {
                id: 2,
                sender: 'User1',
                message: 'Eu fugiat nulla pariatur.',
                timeSent: '2024-11-10 11:01'
            },
            {
                id: 1,
                sender: 'User5',
                message: 'Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia.',
                timeSent: '2022-11-10 11:05'
            }
        ]
    },
    {
        chatName: 'User2',
        type: 'private',
        messages: [
            {
                id: 1,
                sender: 'User2',
                message: 'Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse.',
                timeSent: '2024-4-10 12:00'
            },
            {
                id: 2,
                sender: 'User1',
                message: 'Et harum quidem rerum facilis est et expedita distinctio.',
                timeSent: '2024-11-10 12:05'
            }
        ]
    }
]; %>

    <div id="push-notification-container">
    </div>
</body>
</html>
